<?php

//$po = myoption_view($myoption, '');
//print render($po);


/**
 * Implements hook_entity_info().
 */
function myoption_entity_info() {
  $info = array(
    'myoption' => array(
      'label' => t('myoption'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'myoption',
	  'access callback' => 'myoption_access',
      'fieldable' => TRUE,
      'entity keys' => array(
	     'id' => 'id',
		 'bundle' => 'tid',
		 'label' => 'id',
	  ),
	  'bundle keys' => array(
        'bundle' => 'tid',
      ),
      'bundles' => array(),
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => TRUE,
        ),
	  ),
      'module' => 'myoption',
    ),
  );

  $vid = variable_get('myoption_taxonomy_vid', '');
  if ($vid) {
    $tree = taxonomy_get_tree($vid);
    foreach ($tree as $term) {
      $info['myoption']['bundles'][$term->tid] = array(
        'label' => $term->name,
        'admin' => array(
          'path' => 'taxonomy/term/%taxonomy_term/myoption_list',
          'real path' => 'taxonomy/term/'.$term->tid.'/myoption_list',
          'bundle argument' => 2,
          'access arguments' => array('configure myoptions settings'),
        ),
      );
    }
  }
  return $info;
}




/**
 * Implements hook_permission().
 */
function myoption_permission() {
  return array(
    'configure myoptions settings' => array(
      'title' => t('Configure myoptions settings'),
      'description' => t('Allows users to configure myoptions settings.'),
      'restrict access' => TRUE,
    ),
    'administer myoptions' => array(
      'title' => t('Administer myoptions'),
      'restrict access' => TRUE,
    ),
    'list myoption' => array(
      'title' => t('List myoption'),
      'restrict access' => TRUE,
    ),
    'edit any myoptions' => array(
      'title' => t('Edit any myoption'),
      'restrict access' => TRUE,
    ),
    'edit own myoptions' => array(
      'title' => t('Edit own myoptions'),
      'restrict access' => TRUE,
    ),
    'delete any myoptions' => array(
      'title' => t('Delete any myoptions'),
      'restrict access' => TRUE,
    ),
    'delete own myoptions' => array(
      'title' => t('Delete own myoptions'),
      'restrict access' => TRUE,
    ),
    'create myoptions' => array(
      'title' => t('Create new myoptions'),
    ),
    'view myoptions' => array(
      'title' => t('View myoptions'),
    ),
  );
}



function myoption_access($op, $myoption, $account, $entity_type) {
  $rights = &drupal_static(__FUNCTION__, array());
  if (!in_array($op, array('view', 'update', 'delete', 'create'), TRUE)) {
    return FALSE;
  }
  // Если в функцию не передан пользователь, то проверяем права для текущего пользователя.
  if (empty($account)) {
    global $user;
    $account = $user;
  }
  // $myoption может быть объектом или не существовать, поэтому испольем его id,
  // или $entity_type в качестве статичного идентификатора, который будет использоваться ключом кеша.
  $cid = (is_object($myoption) && !empty($myoption->id)) ? $myoption->id : $entity_type;
  // Если мы уже проверяли для данной сущности и пользователя права доступа,
  // то возвращаем их из кеша.
  if (isset($rights[$account->uid][$cid][$op])) {
    return $rights[$account->uid][$cid][$op];
  }

  if ($op == 'create' && user_access('create myoptions', $account)) {
    $rights[$account->uid][$cid][$op] = TRUE;
    return TRUE;
  } if ($op == 'update') {
    if (user_access('edit any myoptions', $account)) {
      $rights[$account->uid][$cid][$op] = TRUE;
      return TRUE;
    } elseif (user_access('edit own myoptions', $account) && $myoption->uid == $account->uid) {
      $rights[$account->uid][$cid][$op] = TRUE;
      return TRUE;
    }
  } elseif ($op == 'delete') {
    if (user_access('delete any myoptions', $account)) {
      $rights[$account->uid][$cid][$op] = TRUE;
      return TRUE;
    }  elseif (user_access('delete own myoptions', $account) && $myoption->uid == $account->uid) {
      $rights[$account->uid][$cid][$op] = TRUE;
      return TRUE;
    }
  }  elseif ($op == 'view' && user_access('view myoptions', $account)) {
    $rights[$account->uid][$cid][$op] = TRUE;
    return TRUE;
  }
  return FALSE;
}



function myoption_load($myoption_id) {
  $myoptions = myoption_load_multiple(array($myoption_id), array());
  return $myoptions ? reset($myoptions) : FALSE;
}

function myoption_load_multiple($myoption_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('myoption', $myoption_ids, $conditions, $reset);
}

function myoption_delete($myoption_id) {
  myoption_delete_multiple(array($myoption_id));
}

function myoption_delete_multiple($myoption_ids) {
  entity_delete_multiple('myoption', $myoption_ids);
}


function myoption_get_option_ids_by_tid($tid) {
  $ids = db_query("SELECT id FROM {myoption} WHERE tid = :tid", array(':tid' => $tid))->fetchCol();
  return $ids;
}


function myoption_save($myoption) {
    field_attach_presave('myoption', $myoption);
    global $user;
    if (!isset($myoption->is_new)) {
      $myoption->is_new = empty($myoption->id);
    }
    if (empty($myoption->created)) {
      $myoption->created = REQUEST_TIME;
    }
    $myoption->changed = REQUEST_TIME;
    if ($myoption->is_new) {
	  $myoption->uid = $user->uid;
      drupal_write_record('myoption', $myoption);
      $op = 'insert';
    } else {
      drupal_write_record('myoption', $myoption, 'id');
      $op = 'update';
    }




    // Save fields.
    $function = "field_attach_$op";
    $function('myoption', $myoption);
    //
    module_invoke_all('myoption_' . $op, $myoption);
    module_invoke_all('entity_' . $op, $myoption, 'myoption');
	//
    unset($myoption->is_new);
    entity_get_controller('myoption')->resetCache(array($myoption->id));
    db_ignore_slave();
}


/**
 * Implements hook_theme().
 */
function myoption_theme() {
  return array(
    'myoption' => array(
      'render element' => 'elements',
      'template' => 'templates/myoption',
    ),
  );
}

function template_preprocess_myoption(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $variables['myoption'] = $variables['elements']['#myoption'];
  $myoption = $variables['myoption'];
  $variables['date'] = format_date($myoption->created);
  $variables['page'] = $variables['view_mode'] == 'full';
  $variables = array_merge((array) $myoption, $variables);
  $variables += array('content' => array());
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  // Делаем поля доступными в качестве переменных для соответствующего языка.
  field_attach_preprocess('myoption', $myoption, $variables['content'], $variables);
}


function myoption_view_multiple($myoptions, $view_mode = 'full', $langcode = NULL) {
  field_attach_prepare_view('myoption', $myoptions, $view_mode, $langcode);
  entity_prepare_view('myoption', $myoptions, $langcode);
  $build = array();
  $weight = 0;
  foreach ($myoptions as $myoption) {
    $build['myoptions'][$myoption->id] = myoption_view($myoption, $view_mode, $langcode);
    $build['myoptions'][$myoption->id]['#weight'] = $weight++;
  }
  $build['myoptions']['#sorted'] = TRUE;
  return $build;
}



function myoption_view($myoption, $view_mode = 'full', $langcode = NULL) {
  if (!isset($langcode)) {
    global $language;
    $langcode = $language->language;
  }
  // Заполняем $myoption->content данными в виде рендерного массива.
  myoption_build_content($myoption, $view_mode, $langcode);

  $build = $myoption->content;
  // Скрываем данные, что бы избежать их дублирования при выводе $myoption->content.
  unset($myoption->content);

  $build += array(
    '#theme' => 'myoption',
    '#myoption' => $myoption,
    '#view_mode' => $view_mode,
    '#language' => $langcode,
  );
  return $build;
}


function myoption_build_content($myoption, $view_mode = 'full', $langcode = NULL) {
  if (!isset($langcode)) {
    global $language;
    $langcode = $language->language;
  }
  // Удаляем существующий конент, если существует.
  $myoption->content = array();
  field_attach_prepare_view('myoption', array($myoption->id => $myoption), $view_mode, $langcode);
  entity_prepare_view('myoption', array($myoption->id => $myoption), $langcode);
  $myoption->content += field_attach_view('myoption', $myoption, $view_mode, $langcode);
  $myoption->content += array('#view_mode' => $view_mode);
  $myoption->content['links'] = array(
    '#theme' => 'links__myoption',
    '#pre_render' => array('drupal_pre_render_links'),
    '#attributes' => array('class' => array('links')),
  );

}


/**
 * Implements hook_menu().
 */
function myoption_menu() {

  $items['admin/structure/taxonomy/myoption_type_settings'] = array(
    'title' => 'Налаштування характеристик',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('myoption_settings_form'),
    'access arguments' => array('configure myoptions settings'),
	'weight' => 100,
    'file' => 'myoption.admin.inc',
	'type' => MENU_LOCAL_TASK,
  );

  // Страница список.
  $items['taxonomy/term/%taxonomy_term/myoption_list'] = array(
    'title' => 'Характеристики',
    'page callback' => 'myoption_admin_myoptions',
	'page arguments' => array(2),
	'access callback' => 'myoption_list_access_callback',
    'access arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'myoption.admin.inc',
	'weight' => 80,
  );
  // Страница создания.
  $items['taxonomy/term/%taxonomy_term/myoption_list/add'] = array(
    'title' => 'Додати характеристику',
    'page callback' => 'myoption_page_add',
	'page arguments' => array(2),
    'access callback' => 'myoption_access',
    'access arguments' => array('create', NULL, NULL, 'myoption'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'myoption.pages.inc',
  );
  // Страница редактирования.
  $items['myoption/%myoption/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'myoption_page_edit',
    'page arguments' => array(1),
    'access callback' => 'myoption_access',
    'access arguments' => array('update', 1, NULL, 'myoption'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'file' => 'myoption.pages.inc',
  );
  // Страница удаления.
  $items['myoption/%myoption/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('myoption_delete_confirm', 1),
    'access callback' => 'myoption_access',
    'access arguments' => array('delete', 1, NULL, 'myoption'),
    'file' => 'myoption.pages.inc',
  );

  return $items;
}

function myoption_list_access_callback($term){
  $vid = variable_get('myoption_taxonomy_vid', '');
  if ($term->vid == $vid) {
	 return user_access("list myoption") || user_access('administer myoptions');
  }
  return FALSE;
}

/**
 * Implements hook_admin_paths().
 */
function myoption_admin_paths() {
  $paths = array(
    'myoption/add' => TRUE,
    'myoption/*/edit' => TRUE,
    'myoption/*/delete' => TRUE,
    'taxonomy/term/*/myoption_list' => TRUE,
    'taxonomy/term/*/myoption_list/*' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function myoption_taxonomy_term_delete($term) {
  $vid = variable_get('myoption_taxonomy_vid', '');
  if ($term->vid == $vid) {
    $myoption_ids = myoption_get_option_ids_by_tid($term->tid);
    myoption_delete_multiple($myoption_ids);
    field_attach_delete_bundle('myoption', $term->tid);
	drupal_flush_all_caches();
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function myoption_taxonomy_term_insert($term) {
  $vid = variable_get('myoption_taxonomy_vid', '');
  if ($term->vid == $vid) {
    drupal_flush_all_caches();
  }
}
